package de.maltesermailo.tigmod.stones;

import java.util.List;

import de.maltesermailo.tigmod.ChangeModeMessage;
import de.maltesermailo.tigmod.TIGMod;
import de.maltesermailo.tigmod.TeleportMessage;
import de.maltesermailo.tigmod.gauntlet.EnumStones;
import de.maltesermailo.tigmod.gauntlet.InfinityGauntlet;
import de.maltesermailo.tigmod.proxy.ProxyClient;
import net.minecraft.client.Minecraft;
import net.minecraft.client.util.ITooltipFlag;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.SoundEvents;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.ActionResult;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

public class RealityStone extends Item implements BasicStone {
	
	public RealityStone() {
		setUnlocalizedName("reality_stone");
		setRegistryName("reality_stone");
		setMaxStackSize(1);
		setCreativeTab(CreativeTabs.MISC);
	}
	
	@Override
	public void addInformation(ItemStack stack, World worldIn, List<String> tooltip, ITooltipFlag flagIn) {
		tooltip.add("The Reality Stone is the universe's equivalent of the reality. It can alter reality itself.");
	}
	
	@Override
	public void onCreated(ItemStack stack, World worldIn, EntityPlayer playerIn) {
		NBTTagCompound tag = new NBTTagCompound();
		tag.setInteger("currentSelectedPower", EnumPowers.RealityStone.INVISIBILITY.ordinal());
		stack.setTagCompound(tag);
	}
	
	@Override
	public void onUpdate(ItemStack stack, World worldIn, Entity entityIn, int itemSlot, boolean isSelected) {
		if(isSelected) {
			if(stack.getTagCompound() == null) {
				this.onCreated(stack, worldIn, null);
			}
			if(entityIn instanceof EntityPlayer) {
				EntityPlayer player = (EntityPlayer) entityIn;
				player.sendStatusMessage(new TextComponentString("§aSelected: " + this.getCaption(stack)), true);
				
				if(((ProxyClient) TIGMod.proxy).keyBindingChangeMode.isPressed()) {
					SimpleNetworkWrapper network = TIGMod.proxy.INSTANCE;
					network.sendToServer(new ChangeModeMessage());
				}
			}
		}
	}
	
	public String getCaption(ItemStack item) {
		return EnumPowers.RealityStone.values()[item.getTagCompound().getInteger("currentSelectedPower")].getCaption();
	}
	
	@Override
	public ActionResult<ItemStack> onItemRightClick(World worldIn, EntityPlayer playerIn, EnumHand handIn) {
		ItemStack item = playerIn.getHeldItem(handIn);
		
		EnumPowers.RealityStone currentSelected = EnumPowers.RealityStone.values()[item.getTagCompound().getInteger("currentSelectedPower")];
		
		if(currentSelected == EnumPowers.RealityStone.INVISIBILITY) {
			powerInvisibility(worldIn, playerIn);
		}
		
		return super.onItemRightClick(worldIn, playerIn, handIn);
	}
	
	public void powerInvisibility(World world, EntityPlayer player) {
		if(player.isInvisible()) {
			player.setInvisible(false);
		} else {
			player.setInvisible(true);
		}
	}
	
	public void powerCreateItem(World world, EntityPlayer player) {
		if(player.getHeldItemOffhand() != null && player.getHeldItemOffhand().getItem().getUnlocalizedName() != "AIR") {
			player.addItemStackToInventory(player.getHeldItemOffhand().copy());
		}
	}

	@Override
	public int changeMode(ItemStack item, EntityPlayer player, boolean powerStone, boolean gauntlet) {
		int currentSelected = item.getTagCompound().getInteger("currentSelectedPower");
		
		EnumPowers.RealityStone nextPower = null;
		
		if(EnumPowers.RealityStone.values().length < (currentSelected+2)) {
			nextPower = EnumPowers.RealityStone.INVISIBILITY;
		} else {
			nextPower = EnumPowers.RealityStone.values()[currentSelected+1];
			
			if(nextPower.isGauntledNeeded()) {
				item.getTagCompound().setInteger("currentSelectedPower", nextPower.ordinal());
				return changeMode(item, player, powerStone, gauntlet);
			}
			if(nextPower.isPowerStoneNeeded() && !powerStone) {
				if(!player.inventory.hasItemStack(new ItemStack(TIGMod.INSTANCE.powerStoneItem))) {
					item.getTagCompound().setInteger("currentSelectedPower", nextPower.ordinal());
					return changeMode(item, player, powerStone, gauntlet);
				}
			}
		}
		
		item.getTagCompound().setInteger("currentSelectedPower", nextPower.ordinal());
		
		return nextPower.ordinal();
	}

	@Override
	public EnumStones getType() {
		return EnumStones.REALITY_STONE;
	}

	@Override
	public void onClickGauntlet(InfinityGauntlet infinityGauntlet, ItemStack stack, EntityPlayer player) {
		EnumPowers.RealityStone currentSelected = EnumPowers.RealityStone.values()[stack.getTagCompound().getInteger("currentSelectedPower")];
		
		if(currentSelected == EnumPowers.RealityStone.INVISIBILITY) {
			powerInvisibility(player.world, player);
		} else if(currentSelected == EnumPowers.RealityStone.CREATE_ITEM) {
			powerCreateItem(player.world, player);
		}
	}

}
